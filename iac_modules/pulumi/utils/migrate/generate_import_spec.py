#!/usr/bin/env python3
"""Generate Pulumi import specifications for AWS resources.

This script enumerates selected AWS resources using the AWS CLI and
produces both a JSON import specification file and a shell script with
corresponding ``pulumi import`` commands.
"""

from __future__ import annotations

import argparse
import json
import shutil
import subprocess
from pathlib import Path
from typing import Iterable, List, Tuple


Resource = Tuple[str, str, str]


def check_cli_available(executable: str) -> None:
    """Ensure the requested CLI executable is available."""
    if shutil.which(executable) is None:
        raise SystemExit(
            f"The '{executable}' CLI is required but was not found in PATH."
        )


def run_json_command(command: Iterable[str]) -> dict:
    """Execute an AWS CLI command expected to return JSON output."""
    result = subprocess.run(
        list(command),
        check=True,
        capture_output=True,
        text=True,
    )
    return json.loads(result.stdout)


def discover_s3_buckets(profile: str | None, region: str | None) -> List[Resource]:
    """Enumerate all S3 buckets available to the account."""
    cmd = ["aws"]
    if profile:
        cmd.extend(["--profile", profile])
    if region:
        cmd.extend(["--region", region])
    cmd.extend(["s3api", "list-buckets", "--output", "json"])

    data = run_json_command(cmd)
    buckets = [bucket["Name"] for bucket in data.get("Buckets", [])]

    return [
        ("aws:s3/bucket:Bucket", f"s3-{name}", name)
        for name in sorted(buckets)
    ]


def discover_ec2_instances(profile: str | None, region: str | None) -> List[Resource]:
    """Enumerate all EC2 instances in the target region."""
    cmd = ["aws"]
    if profile:
        cmd.extend(["--profile", profile])
    if region:
        cmd.extend(["--region", region])
    cmd.extend([
        "ec2",
        "describe-instances",
        "--output",
        "json",
    ])

    data = run_json_command(cmd)
    instance_ids: List[str] = []
    for reservation in data.get("Reservations", []):
        for instance in reservation.get("Instances", []):
            instance_id = instance.get("InstanceId")
            if instance_id:
                instance_ids.append(instance_id)

    return [
        ("aws:ec2/instance:Instance", f"ec2-{instance_id}", instance_id)
        for instance_id in sorted(instance_ids)
    ]


def build_import_spec(resources: Iterable[Resource]) -> dict:
    """Create the JSON structure for the import specification."""
    return {
        "resources": [
            {"type": r_type, "name": name, "id": resource_id}
            for r_type, name, resource_id in resources
        ]
    }


def write_import_commands(resources: Iterable[Resource], output_path: Path) -> None:
    """Write a helper shell script with pulumi import commands."""
    lines = [
        "#!/usr/bin/env bash",
        "set -euo pipefail",
        "",
        "# Generated by generate_import_spec.py",
        "",
    ]

    for r_type, name, resource_id in resources:
        lines.append(f"pulumi import {r_type} \"{name}\" \"{resource_id}\"")

    output_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
    output_path.chmod(0o755)


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--profile",
        help="AWS CLI profile name to use",
    )
    parser.add_argument(
        "--region",
        help=(
            "AWS region for regional services (EC2). "
            "S3 buckets are globally enumerated."
        ),
    )
    parser.add_argument(
        "--spec-output",
        default="import-spec.json",
        type=Path,
        help="Path to write the generated import specification JSON",
    )
    parser.add_argument(
        "--commands-output",
        default="import-commands.sh",
        type=Path,
        help="Path to write the generated pulumi import commands script",
    )

    args = parser.parse_args()

    check_cli_available("aws")

    resources: List[Resource] = []
    resources.extend(discover_s3_buckets(args.profile, args.region))
    resources.extend(discover_ec2_instances(args.profile, args.region))

    spec = build_import_spec(resources)
    args.spec_output.write_text(
        json.dumps(spec, indent=2, sort_keys=True) + "\n",
        encoding="utf-8",
    )

    write_import_commands(resources, args.commands_output)

    print(
        f"Generated {len(resources)} resources in {args.spec_output} "
        f"and {args.commands_output}."
    )


if __name__ == "__main__":
    main()
