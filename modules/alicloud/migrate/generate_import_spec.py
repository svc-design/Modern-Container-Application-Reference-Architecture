#!/usr/bin/env python3
"""Generate Pulumi import specifications for Alibaba Cloud resources."""

from __future__ import annotations

import argparse
import json
import shutil
import subprocess
from pathlib import Path
from typing import Iterable, List, Tuple

Resource = Tuple[str, str, str]


def check_cli_available(executable: str) -> None:
    if shutil.which(executable) is None:
        raise SystemExit(
            f"The '{executable}' CLI is required but was not found in PATH."
        )


def run_json_command(command: Iterable[str]) -> dict:
    result = subprocess.run(
        list(command),
        check=True,
        capture_output=True,
        text=True,
    )
    return json.loads(result.stdout)


def discover_oss_buckets(region: str | None) -> List[Resource]:
    cmd = ["aliyun", "oss", "ListBuckets"]
    if region:
        cmd.extend(["--region", region])
    cmd.extend(["--output", "json"])

    data = run_json_command(cmd)
    buckets = [bucket.get("Name") for bucket in data.get("Buckets", {}).get("Bucket", [])]

    return [
        ("alicloud:oss/bucket:Bucket", f"oss-{name}", name)
        for name in sorted(bucket for bucket in buckets if bucket)
    ]


def discover_ecs_instances(region: str | None) -> List[Resource]:
    cmd = ["aliyun", "ecs", "DescribeInstances"]
    if region:
        cmd.extend(["--RegionId", region])
    cmd.extend(["--output", "json"])

    data = run_json_command(cmd)
    instances = data.get("Instances", {}).get("Instance", [])

    instance_ids = [inst.get("InstanceId") for inst in instances if inst.get("InstanceId")]

    return [
        ("alicloud:ecs/instance:Instance", f"ecs-{instance_id}", instance_id)
        for instance_id in sorted(instance_ids)
    ]


def build_import_spec(resources: Iterable[Resource]) -> dict:
    return {
        "resources": [
            {"type": r_type, "name": name, "id": resource_id}
            for r_type, name, resource_id in resources
        ]
    }


def write_import_commands(resources: Iterable[Resource], output_path: Path) -> None:
    lines = [
        "#!/usr/bin/env bash",
        "set -euo pipefail",
        "",
        "# Generated by generate_import_spec.py",
        "",
    ]
    for r_type, name, resource_id in resources:
        lines.append(f"pulumi import {r_type} \"{name}\" \"{resource_id}\"")

    output_path.write_text("\n".join(lines) + "\n", encoding="utf-8")
    output_path.chmod(0o755)


def main() -> None:
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        "--region",
        help="Alibaba Cloud region identifier, e.g. cn-hangzhou",
    )
    parser.add_argument(
        "--spec-output",
        default="import-spec.json",
        type=Path,
        help="Path to write the generated import specification JSON",
    )
    parser.add_argument(
        "--commands-output",
        default="import-commands.sh",
        type=Path,
        help="Path to write the generated pulumi import commands script",
    )

    args = parser.parse_args()

    check_cli_available("aliyun")

    resources: List[Resource] = []
    resources.extend(discover_oss_buckets(args.region))
    resources.extend(discover_ecs_instances(args.region))

    spec = build_import_spec(resources)
    args.spec_output.write_text(
        json.dumps(spec, indent=2, sort_keys=True) + "\n",
        encoding="utf-8",
    )

    write_import_commands(resources, args.commands_output)

    print(
        f"Generated {len(resources)} resources in {args.spec_output} "
        f"and {args.commands_output}."
    )


if __name__ == "__main__":
    main()
